/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞
 */

import { attachMessageActionListeners } from './message-actions';

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param {string|Date} timestamp - –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {string} - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
 */
export function formatTime(timestamp) {
    const date = timestamp instanceof Date ? timestamp : new Date(timestamp);
    if (isNaN(date)) return '';
    
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${hours}:${minutes}`;
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è XSS
 * @param {string} text - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @returns {string} - —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export function escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

/**
 * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–∏–∑
 * @param {boolean} smooth - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–∞–≤–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
 */
export function scrollToBottom(smooth = true) {
    const chatMessages = document.getElementById('chat-messages');
    if (chatMessages) {
        chatMessages.scrollTo({
            top: chatMessages.scrollHeight,
            behavior: smooth ? 'smooth' : 'auto'
        });
    }
}

/**
 * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é
 * @param {boolean} showPinnedOnly - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ
 */
export function filterMessages(showPinnedOnly = false) {
    const messages = document.querySelectorAll('#chat-messages .message');
    messages.forEach(message => {
        if (showPinnedOnly) {
            message.style.display = message.classList.contains('pinned') ? '' : 'none';
        } else {
            message.style.display = '';
        }
    });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param {number} bytes - —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
 * @returns {string} - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
 */
function formatFileSize(bytes) {
    if (bytes === 0 || !bytes) return '';
    const k = 1024;
    const sizes = ['–ë–∞–π—Ç', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param {Array} messages - –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param {number} currentUserId - ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Set} loadedMessageIds - Set —Å ID —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param {string} csrfToken - CSRF-—Ç–æ–∫–µ–Ω
 * @param {string} chatType - —Ç–∏–ø —á–∞—Ç–∞
 * @param {string} chatId - ID —á–∞—Ç–∞
 */
export function renderMessages(messages, currentUserId, loadedMessageIds, csrfToken, chatType, chatId) {
    if (!messages || messages.length === 0) return;
    
    const chatMessagesList = document.querySelector('#chat-messages ul');
    if (!chatMessagesList) return;
    
    let fragment = document.createDocumentFragment();
    
    messages.forEach(message => {
        if (loadedMessageIds.has(message.id)) return;
        
        loadedMessageIds.add(message.id);
        const isCurrentUser = message.sender_id == currentUserId;
        
        const messageEl = document.createElement('li');
        messageEl.className = `message ${isCurrentUser ? 'own' : ''}`;
        if (message.is_pinned) messageEl.classList.add('pinned');
        messageEl.setAttribute('data-id', message.id);
        
        const messageHeader = document.createElement('div');
        messageHeader.className = 'message-header';
        
        const senderName = document.createElement('span');
        senderName.className = 'sender-name';
        senderName.textContent = message.sender_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        const messageTime = document.createElement('span');
        messageTime.className = 'message-time';
        messageTime.textContent = formatTime(message.created_at);
        
        messageHeader.appendChild(senderName);
        messageHeader.appendChild(messageTime);
        
        const messageContent = document.createElement('div');
        messageContent.className = 'message-content';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (message.message && message.message.trim()) {
            const textContent = document.createElement('div');
            textContent.className = 'message-text';
            textContent.innerHTML = escapeHtml(message.message).replace(/\n/g, '<br>');
            messageContent.appendChild(textContent);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (message.attachments && message.attachments.length > 0) {
            const attachmentsContainer = document.createElement('div');
            attachmentsContainer.className = 'attachments';
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã
            const images = [];
            const files = [];
            
            message.attachments.forEach(attachment => {
                if (!attachment) return;
                
                if (attachment.mime && attachment.mime.startsWith('image/')) {
                    images.push(attachment);
                } else {
                    files.push(attachment);
                }
            });
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (images.length > 0) {
                const imagesContainer = document.createElement('div');
                imagesContainer.className = `attachment-images images-${images.length > 3 ? 'grid' : 'row'}`;
                
                images.forEach((image) => {
                    const imgContainer = document.createElement('div');
                    imgContainer.className = 'image-container';
                    
                    const img = document.createElement('img');
                    img.src = image.url;
                    img.alt = image.original_file_name || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
                    img.className = 'attachment-image';
                    img.loading = 'lazy'; // –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    
                    // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ
                    img.addEventListener('click', () => {
                        const modal = document.createElement('div');
                        modal.className = 'image-modal';
                        modal.innerHTML = `
                            <div class="image-modal-content">
                                <img src="${image.url}" alt="${image.original_file_name || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}">
                                <button class="close-modal">&times;</button>
                            </div>
                        `;
                        document.body.appendChild(modal);
                        modal.addEventListener('click', (e) => {
                            if (e.target === modal || e.target.classList.contains('close-modal')) {
                                modal.remove();
                            }
                        });
                    });
                    
                    imgContainer.appendChild(img);
                    imagesContainer.appendChild(imgContainer);
                });
                
                attachmentsContainer.appendChild(imagesContainer);
            }
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–∞–π–ª—ã
            if (files.length > 0) {
                const filesContainer = document.createElement('div');
                filesContainer.className = 'attachment-files';
                
                files.forEach(file => {
                    const fileLink = document.createElement('a');
                    fileLink.href = file.url;
                    fileLink.className = 'attachment-file';
                    fileLink.target = '_blank';
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                    let fileIcon = 'üìÑ';
                    if (file.mime) {
                        if (file.mime.includes('pdf')) fileIcon = 'üìï';
                        else if (file.mime.includes('word')) fileIcon = 'üìò';
                        else if (file.mime.includes('excel') || file.mime.includes('spreadsheet')) fileIcon = 'üìä';
                        else if (file.mime.includes('zip') || file.mime.includes('rar')) fileIcon = 'üóÇÔ∏è';
                        else if (file.mime.includes('audio')) fileIcon = 'üéµ';
                        else if (file.mime.includes('video')) fileIcon = 'üé¨';
                    }
                    
                    const fileName = file.original_file_name || '–§–∞–π–ª';
                    fileLink.innerHTML = `<span class="file-icon">${fileIcon}</span> ${fileName}`;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    if (file.size) {
                        const fileSizeElement = document.createElement('span');
                        fileSizeElement.className = 'file-size';
                        fileSizeElement.textContent = formatFileSize(file.size);
                        fileLink.appendChild(fileSizeElement);
                    }
                    
                    filesContainer.appendChild(fileLink);
                });
                
                attachmentsContainer.appendChild(filesContainer);
            }
            
            messageContent.appendChild(attachmentsContainer);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        if (!message.is_system) {
            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'message-actions';
            
            // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
            if (isCurrentUser) {
                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'delete-message';
                deleteBtn.setAttribute('data-message-id', message.id);
                deleteBtn.innerHTML = `<img src="${window.deleteImgUrl || '/img/delete.svg'}" alt="–£–¥–∞–ª–∏—Ç—å">`;
                actionsDiv.appendChild(deleteBtn);
            }
            
            // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è/–æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è
            if (message.is_pinned) {
                const unpinBtn = document.createElement('button');
                unpinBtn.className = 'unpin-message';
                unpinBtn.setAttribute('data-message-id', message.id);
                unpinBtn.innerHTML = `<img src="${window.unpinImgUrl || '/img/unpin.svg'}" alt="–û—Ç–∫—Ä–µ–ø–∏—Ç—å">`;
                actionsDiv.appendChild(unpinBtn);
            } else {
                const pinBtn = document.createElement('button');
                pinBtn.className = 'pin-message';
                pinBtn.setAttribute('data-message-id', message.id);
                pinBtn.innerHTML = `<img src="${window.pinImgUrl || '/img/pin.svg'}" alt="–ó–∞–∫—Ä–µ–ø–∏—Ç—å">`;
                actionsDiv.appendChild(pinBtn);
            }
            
            messageContent.appendChild(actionsDiv);
        }
        
        messageEl.appendChild(messageHeader);
        messageEl.appendChild(messageContent);
        
        fragment.appendChild(messageEl);
    });
    
    chatMessagesList.appendChild(fragment);
    scrollToBottom();
    
    // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    attachMessageActionListeners(csrfToken, chatType, chatId);
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ API
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export async function fetchNewMessages() {
    if (!window.currentChatId || !window.currentChatType) return;
    try {
        const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
        // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–±—Ä–æ—Å –∫–µ—à–∞
        const timestamp = new Date().getTime();
        
        const response = await fetch(`/chats/${window.currentChatType}/${window.currentChatId}/new-messages?t=${timestamp}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': csrfToken,
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': '0'
            },
            body: JSON.stringify({
                last_message_id: window.lastLoadedMessageId || 0
            })
        });
        
        if (response.ok) {
            const data = await response.json();
           
            
            if (data.messages && data.messages.length > 0) {
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ loadedMessageIds —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (!window.loadedMessageIds) {
                    window.loadedMessageIds = new Set();
                }
                
                // –û–±–Ω–æ–≤–∏–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
                let maxMessageId = window.lastLoadedMessageId || 0;
                data.messages.forEach(message => {
                    if (message.id > maxMessageId) {
                        maxMessageId = message.id;
                    }
                });
                window.lastLoadedMessageId = maxMessageId;
                
                // –†–µ–Ω–¥–µ—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                const chatMessagesList = document.querySelector('#chat-messages ul');
                if (!chatMessagesList) {
                    console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                    return;
                }
                
                renderMessages(
                    data.messages,
                    window.Laravel?.user?.id,
                    window.loadedMessageIds,
                    csrfToken,
                    window.currentChatType,
                    window.currentChatId
                );
                
                // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                scrollToBottom();
                
                // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                markMessagesAsRead(window.currentChatId, window.currentChatType);
            }
        } else {
         
        }
    } catch (error) {
      
    }
}

/**
 * –û—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
 * @param {string|number} chatId ID —á–∞—Ç–∞
 * @param {string} chatType –¢–∏–ø —á–∞—Ç–∞ (personal –∏–ª–∏ group)
 */
export function markMessagesAsRead(chatId, chatType) {
    if (!chatId || !chatType) return;
    
    fetch(`/chats/${chatType}/${chatId}/mark-read`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content'),
            'Accept': 'application/json'
        }
    }).catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error));
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
 */
export function initChatWebSockets(chatId, chatType) {
    if (!window.Echo) {
        console.warn('Laravel Echo –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return;
    }
    
    try {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        window.Echo.private(`chat.${chatType}.${chatId}`)
            .listen('.message.sent', (e) => {
                console.log('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket:', e);
                if (e.message && !document.querySelector(`.message[data-id="${e.message.id}"]`)) {
                    const messagesList = document.querySelector('#chat-messages ul');
                    if (messagesList) {
                        // –†–µ–Ω–¥–µ—Ä–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        const loadedIds = new Set();
                        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
                        renderMessages([e.message], window.Laravel.user.id, loadedIds, csrfToken, chatType, chatId);
                    }
                }
            })
            .listen('.message.deleted', (e) => {
                if (e.message_id) {
                    const messageEl = document.querySelector(`.message[data-id="${e.message_id}"]`);
                    if (messageEl) {
                        messageEl.remove();
                    }
                }
            });
            
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
        window.Echo.private(`typing.${chatType}.${chatId}`)
            .listenForWhisper('typing', (e) => {
                const typingIndicator = document.getElementById('typing-indicator');
                if (typingIndicator) {
                    typingIndicator.textContent = `${e.name} –ø–µ—á–∞—Ç–∞–µ—Ç...`;
                    typingIndicator.style.display = 'block';
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => {
                        typingIndicator.style.display = 'none';
                    }, 3000);
                }
            });
            
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ WebSocket –¥–ª—è —á–∞—Ç–∞:', error);
    }
}
